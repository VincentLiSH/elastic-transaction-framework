http://note.youdao.com/noteshare?id=02dc6365a6fc26ce6c455e63a9d7b74f
参照Spring stateMachine设计一个简单的工作流框架
https://blog.csdn.net/u012129558/article/details/90180577 

事实上绝大多数项目都是个statemachine状态机，参考维基百科如下：
有限状态机（英语：finite-state machine，缩写：FSM）又称有限状态自动机，简称状态机，是表示有限个状态以及在这些状态之间的转移和动作等行为的数学模型。
不管身处项目中的程序员是否意识到，其实他们都是在用hard coding的方式构造一个状态机；
系统的建造过程可以简单理解为两个步骤：
状态机建模：分析业务流程，识别出关键领域模型以及其包含哪些状态；
编码实现这个状态机：
用实体表示模型，用实体的对应字段表示状态，
然后围绕这个模型编写业务逻辑代码实现状态之间的转移动作、业务规则等；
持久化状态（到数据库）以便在程序的生命周期内可靠的保持状态、随时加载状态；
状态机测试：如果继续展开，那么测试行为也可以看作是对这个编码实现的状态机的行为进行验证，确保其行为符合预期；
业务分析和建模
拿到一个需求时，有业务分析建模经验的程序员很快可以识别出其中的4要素：
模型：现实世界中业务流程自然呈现出的主题和实体；
状态：模型在业务流程过程中自然呈现出的阶段划分；
操作/交易：模型在不同阶段直接切换时对应的动作；
规则：模型在不同状态下可以支持哪些操作/交易；

以两个典型的业务流程举例说明：
房产抵押类贷款审批流程：
模型：核心主题/模型——房产抵押类贷款审批工单；关联模型：共签人、抵押物、资产评估、个人征信记录、外访记录、视频记录、初审意见、终审意见（审批额度、利率、费用、期限、还款方式等）
操作/交易：新建、质检复核、个人征信查询、资产评估、外访、视频审查、初审、终审、拒单、资金对接、签约、放款、归档；
状态：新建、质检完成、征信完成、资产评估完成、外访完成、视频审查完成、初审完成、终审完成、被驳回、资金对接、过期待处理、签约完成、放款完成、已归档；
规则：除了各个状态直接的前后关系，还包括：时效性、权限、金额限制、信用评分限制、其它。。。。
订单履约：
模型：订单、仓库sku、物流运单、退款申请单、售后服务工单；
操作/交易：订单生效、锁定库存、调货、拣货完成、发运、签收、退款、售后申请；
状态：待履约、库存已锁定、待调货、订单取消、拣货完成、配送中、已签收、退款中、售后处理中；
规则：除了各个状态直接的前后关系，还包括：订单取消时效、签收时效、退款时效、售后规则。。。
系统设计开发
根据前面的分析，软件系统可以看作是程序员用硬编码的方式实现的一个状态机；
于是很容易想到一个问题——如果设计一个通用的状态机框架或引擎，那么是否可以基于这个半成品的状态机来极大的简化和加速软件系统的建造过程，
同时减少这个过程中的hard coding的成分从而改善软件架构的质量（主要是可维护性、可扩展性）？